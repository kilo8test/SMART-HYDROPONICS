-- add_plant.sql (updated)
-- ============================================================
-- Table: add_plant
-- Description: Stores plant templates that an admin can create
-- ============================================================

CREATE TABLE IF NOT EXISTS add_plant (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    image_url TEXT NOT NULL, -- This will be the cover image

    -- Harvest (single number, days to harvest)
    days_to_harvest INT NOT NULL CHECK (days_to_harvest > 0),

    -- PH range (nullable)
    ph_min NUMERIC(5,2),
    ph_max NUMERIC(5,2),

    -- PPM range (nullable)
    ppm_min INT,
    ppm_max INT,

    -- Category (free, paid, package)
    category VARCHAR(20) NOT NULL DEFAULT 'free' CHECK (category IN ('free', 'paid', 'package')),

    -- Plant Phase Images (4 phases Ã— 3 states: normal, dead, water)
    -- Phase 1
    phase1_normal_image TEXT,
    phase1_dead_image TEXT,
    phase1_water_image TEXT,

    -- Phase 2
    phase2_normal_image TEXT,
    phase2_dead_image TEXT,
    phase2_water_image TEXT,

    -- Phase 3
    phase3_normal_image TEXT,
    phase3_dead_image TEXT,
    phase3_water_image TEXT,

    -- Phase 4
    phase4_normal_image TEXT,
    phase4_dead_image TEXT,
    phase4_water_image TEXT,

    created_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    updated_at TIMESTAMPTZ DEFAULT NOW() NOT NULL
);

-- Trigger function: auto-update updated_at on row modification
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $$
BEGIN
   NEW.updated_at = NOW();
   RETURN NEW;
END;
$$ LANGUAGE 'plpgsql';

CREATE TRIGGER update_add_plant_updated_at
BEFORE UPDATE ON add_plant
FOR EACH ROW
EXECUTE FUNCTION update_updated_at_column();

-- Storage bucket: plant_images
-- Create the 'plant_images' bucket if it doesn't exist
INSERT INTO storage.buckets (id, name, public)
VALUES ('plant_images', 'plant_images', true)
ON CONFLICT (id) DO NOTHING;

-- Policies for add_plant and storage.objects
DROP POLICY IF EXISTS "Allow authenticated users to add plants" ON public.add_plant;
CREATE POLICY "Allow authenticated users to add plants"
ON public.add_plant
FOR INSERT
TO authenticated
WITH CHECK (true);

DROP POLICY IF EXISTS "Allow authenticated users to read plant templates" ON public.add_plant;
CREATE POLICY "Allow authenticated users to read plant templates"
ON public.add_plant
FOR SELECT
TO authenticated
USING (true);

DROP POLICY IF EXISTS "Allow authenticated users to upload plant images" ON storage.objects;
CREATE POLICY "Allow authenticated users to upload plant images"
ON storage.objects
FOR INSERT
TO authenticated
WITH CHECK (bucket_id = 'plant_images');

DROP POLICY IF EXISTS "Allow public read access to plant images" ON storage.objects;
CREATE POLICY "Allow public read access to plant images"
ON storage.objects
FOR SELECT
USING (bucket_id = 'plant_images');
