-- user_plants.sql
-- ============================================================
-- Table: user_plants
-- Description: Stores plants added by users to their garden
-- ============================================================

CREATE TABLE IF NOT EXISTS user_plants (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    plant_id BIGINT NOT NULL REFERENCES add_plant(id) ON DELETE CASCADE,
    added_at TIMESTAMPTZ DEFAULT NOW() NOT NULL,
    UNIQUE(user_id, plant_id) -- Prevent duplicate plants per user
);

-- Trigger function: auto-update added_at on insert (if needed, but using DEFAULT NOW())
-- No update trigger needed as this is mostly insert-only

-- Policies for user_plants
DROP POLICY IF EXISTS "Users can view their own plants" ON public.user_plants;
CREATE POLICY "Users can view their own plants"
ON public.user_plants
FOR SELECT
TO authenticated
USING (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can add plants to their garden" ON public.user_plants;
CREATE POLICY "Users can add plants to their garden"
ON public.user_plants
FOR INSERT
TO authenticated
WITH CHECK (auth.uid() = user_id);

DROP POLICY IF EXISTS "Users can remove plants from their garden" ON public.user_plants;
CREATE POLICY "Users can remove plants from their garden"
ON public.user_plants
FOR DELETE
TO authenticated
USING (auth.uid() = user_id);